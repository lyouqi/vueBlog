(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{64:function(a,t,s){"use strict";s.r(t);var n=s(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("div",{staticClass:"content"},[s("h3",{attrs:{id:"前沿"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前沿","aria-hidden":"true"}},[a._v("#")]),a._v(" 前沿")]),s("p",[a._v("来到58的第二天，主要是熟悉一些基本流程以及操作，但是之前自己对于git来说也就是会一些简单的上传提交等，然后这次主要用到了一些分支合并以及一些快捷办法，所以就写了这片git一些常用骚操作，忘了一些命令的时候可以返回来查一下，希望能够给到大家一点帮助。")]),s("h3",{attrs:{id:"ssh密匙操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssh密匙操作","aria-hidden":"true"}},[a._v("#")]),a._v(" ssh密匙操作")]),s("h5",{attrs:{id:"查看密钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看密钥","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看密钥")]),s("p",[a._v("默认存储在～/.ssh目录下")]),s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{attrs:{class:"token function"}},[a._v("cd")]),a._v(" ~/.ssh\n$ "),s("span",{attrs:{class:"token function"}},[a._v("cat")]),a._v(" id_rsa.pub\n")])]),s("h5",{attrs:{id:"生成密钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成密钥","aria-hidden":"true"}},[a._v("#")]),a._v(" 生成密钥")]),s("p",[a._v("默认安装git")]),s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ ssh-keygen\n")])]),s("p",[a._v("一路回车即可，生成的目录就在默认目录~/.ssh下")]),s("h3",{attrs:{id:"基本上传下载操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本上传下载操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 基本上传下载操作")]),s("h5",{attrs:{id:"克隆远端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#克隆远端","aria-hidden":"true"}},[a._v("#")]),a._v(" 克隆远端")]),s("p",[a._v("从git远端克隆到本地")]),s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{attrs:{class:"token command"}},[a._v("$ git clone 远端地址")]),a._v("\n")])]),s("h5",{attrs:{id:"初始化以及提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化以及提交","aria-hidden":"true"}},[a._v("#")]),a._v(" 初始化以及提交")]),s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{attrs:{class:"token command"}},[a._v("$ git init")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git add 文件名")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git commit"),s("span",{attrs:{class:"token parameter"}},[a._v(" -m")]),a._v(" ")]),s("span",{attrs:{class:"token string"}},[a._v("'信息'")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git push origin master")]),a._v("\n")])]),s("p",[a._v("命令合并，直接提交已修改文件")]),s("p",[a._v("git commit -a -m '提交信息'")]),s("h3",{attrs:{id:"分支命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支命令","aria-hidden":"true"}},[a._v("#")]),a._v(" 分支命令")]),s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{attrs:{class:"token command"}},[a._v("$ git branch 列出所有本地分支")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git branch"),s("span",{attrs:{class:"token parameter"}},[a._v(" -r")]),a._v(" 所有远端分支")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git branch"),s("span",{attrs:{class:"token parameter"}},[a._v(" -a")]),a._v(" 所有分支")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git branch [branch-name] 新建分支但停留在当前分支")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git checkout"),s("span",{attrs:{class:"token parameter"}},[a._v(" -b")]),a._v(" [branch-name] 新建分支并切换到该分支")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git checkout [branch-name] 切换到指定分支")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git merge [branch-name] 合并分支到当前分支，例如合并分支到master务必切换当前分支到master下")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git branch"),s("span",{attrs:{class:"token parameter"}},[a._v(" -d")]),a._v(" [branch-name] 删除分支")]),a._v("\n")])]),s("h3",{attrs:{id:"同步命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步命令","aria-hidden":"true"}},[a._v("#")]),a._v(" 同步命令")]),s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{attrs:{class:"token command"}},[a._v("$ git status 查看当前状态")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git fetch [remote] 下载远程仓库所有变动")]),a._v("\n"),s("span",{attrs:{class:"token command"}},[a._v("$ git push [remote] [branch] 上传本地指定分支到远程仓库")]),a._v("\ngit push [remote] --all 推送所有分支到远端\n")])])])}],!1,null,null,null);t.default=r.exports}}]);